/*
 * generated by Xtext
 */
package at.ac.tuwien.big.momot.lang.serializer;

import at.ac.tuwien.big.momot.lang.momot.AlgorithmList;
import at.ac.tuwien.big.momot.lang.momot.AlgorithmReferences;
import at.ac.tuwien.big.momot.lang.momot.AlgorithmSpecification;
import at.ac.tuwien.big.momot.lang.momot.AnalysisGroupList;
import at.ac.tuwien.big.momot.lang.momot.AnalysisGroupSpecification;
import at.ac.tuwien.big.momot.lang.momot.AnalysisOrchestration;
import at.ac.tuwien.big.momot.lang.momot.BoxplotCommand;
import at.ac.tuwien.big.momot.lang.momot.CollectorArray;
import at.ac.tuwien.big.momot.lang.momot.DefExpression;
import at.ac.tuwien.big.momot.lang.momot.EqualityHelper;
import at.ac.tuwien.big.momot.lang.momot.ExperimentOrchestration;
import at.ac.tuwien.big.momot.lang.momot.FitnessDimensionConstructor;
import at.ac.tuwien.big.momot.lang.momot.FitnessDimensionOCL;
import at.ac.tuwien.big.momot.lang.momot.FitnessDimensionXBase;
import at.ac.tuwien.big.momot.lang.momot.FitnessFunctionSpecification;
import at.ac.tuwien.big.momot.lang.momot.IndicatorArray;
import at.ac.tuwien.big.momot.lang.momot.InputModel;
import at.ac.tuwien.big.momot.lang.momot.MOMoTSearch;
import at.ac.tuwien.big.momot.lang.momot.ModelsCommand;
import at.ac.tuwien.big.momot.lang.momot.ModuleOrchestration;
import at.ac.tuwien.big.momot.lang.momot.MomotPackage;
import at.ac.tuwien.big.momot.lang.momot.ObjectivesCommand;
import at.ac.tuwien.big.momot.lang.momot.ParmeterValueSpecification;
import at.ac.tuwien.big.momot.lang.momot.PrintAnalysisCommand;
import at.ac.tuwien.big.momot.lang.momot.ResultManagement;
import at.ac.tuwien.big.momot.lang.momot.SaveAnalysisCommand;
import at.ac.tuwien.big.momot.lang.momot.SearchOrchestration;
import at.ac.tuwien.big.momot.lang.momot.ShowArray;
import at.ac.tuwien.big.momot.lang.momot.SolutionsCommand;
import at.ac.tuwien.big.momot.lang.momot.VariableDeclaration;
import at.ac.tuwien.big.momot.lang.services.MOMoTGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.serializer.XbaseSemanticSequencer;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class MOMoTSemanticSequencer extends XbaseSemanticSequencer {

	@Inject
	private MOMoTGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MomotPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MomotPackage.ALGORITHM_LIST:
				sequence_AlgorithmList(context, (AlgorithmList) semanticObject); 
				return; 
			case MomotPackage.ALGORITHM_REFERENCES:
				sequence_AlgorithmReferences(context, (AlgorithmReferences) semanticObject); 
				return; 
			case MomotPackage.ALGORITHM_SPECIFICATION:
				sequence_AlgorithmSpecification(context, (AlgorithmSpecification) semanticObject); 
				return; 
			case MomotPackage.ANALYSIS_GROUP_LIST:
				sequence_AnalysisGroupList(context, (AnalysisGroupList) semanticObject); 
				return; 
			case MomotPackage.ANALYSIS_GROUP_SPECIFICATION:
				sequence_AnalysisGroupSpecification(context, (AnalysisGroupSpecification) semanticObject); 
				return; 
			case MomotPackage.ANALYSIS_ORCHESTRATION:
				sequence_AnalysisOrchestration(context, (AnalysisOrchestration) semanticObject); 
				return; 
			case MomotPackage.BOXPLOT_COMMAND:
				sequence_BoxplotCommand(context, (BoxplotCommand) semanticObject); 
				return; 
			case MomotPackage.COLLECTOR_ARRAY:
				sequence_CollectorArray(context, (CollectorArray) semanticObject); 
				return; 
			case MomotPackage.DEF_EXPRESSION:
				sequence_DefExpression(context, (DefExpression) semanticObject); 
				return; 
			case MomotPackage.EQUALITY_HELPER:
				sequence_EqualityHelper(context, (EqualityHelper) semanticObject); 
				return; 
			case MomotPackage.EXPERIMENT_ORCHESTRATION:
				sequence_ExperimentOrchestration(context, (ExperimentOrchestration) semanticObject); 
				return; 
			case MomotPackage.FITNESS_DIMENSION_CONSTRUCTOR:
				sequence_FitnessDimensionConstructor(context, (FitnessDimensionConstructor) semanticObject); 
				return; 
			case MomotPackage.FITNESS_DIMENSION_OCL:
				sequence_FitnessDimensionOCL(context, (FitnessDimensionOCL) semanticObject); 
				return; 
			case MomotPackage.FITNESS_DIMENSION_XBASE:
				sequence_FitnessDimensionXBase(context, (FitnessDimensionXBase) semanticObject); 
				return; 
			case MomotPackage.FITNESS_FUNCTION_SPECIFICATION:
				sequence_FitnessFunctionSpecification(context, (FitnessFunctionSpecification) semanticObject); 
				return; 
			case MomotPackage.INDICATOR_ARRAY:
				sequence_IndicatorArray(context, (IndicatorArray) semanticObject); 
				return; 
			case MomotPackage.INPUT_MODEL:
				sequence_InputModel(context, (InputModel) semanticObject); 
				return; 
			case MomotPackage.MO_MO_TSEARCH:
				sequence_MOMoTSearch(context, (MOMoTSearch) semanticObject); 
				return; 
			case MomotPackage.MODELS_COMMAND:
				sequence_ModelsCommand(context, (ModelsCommand) semanticObject); 
				return; 
			case MomotPackage.MODULE_ORCHESTRATION:
				sequence_ModuleOrchestration(context, (ModuleOrchestration) semanticObject); 
				return; 
			case MomotPackage.OBJECTIVES_COMMAND:
				sequence_ObjectivesCommand(context, (ObjectivesCommand) semanticObject); 
				return; 
			case MomotPackage.PARMETER_VALUE_SPECIFICATION:
				sequence_ParmeterValueSpecification(context, (ParmeterValueSpecification) semanticObject); 
				return; 
			case MomotPackage.PRINT_ANALYSIS_COMMAND:
				sequence_PrintAnalysisCommand(context, (PrintAnalysisCommand) semanticObject); 
				return; 
			case MomotPackage.RESULT_MANAGEMENT:
				sequence_ResultManagement(context, (ResultManagement) semanticObject); 
				return; 
			case MomotPackage.SAVE_ANALYSIS_COMMAND:
				sequence_SaveAnalysisCommand(context, (SaveAnalysisCommand) semanticObject); 
				return; 
			case MomotPackage.SEARCH_ORCHESTRATION:
				sequence_SearchOrchestration(context, (SearchOrchestration) semanticObject); 
				return; 
			case MomotPackage.SHOW_ARRAY:
				sequence_ShowArray(context, (ShowArray) semanticObject); 
				return; 
			case MomotPackage.SOLUTIONS_COMMAND:
				sequence_SolutionsCommand(context, (SolutionsCommand) semanticObject); 
				return; 
			case MomotPackage.VARIABLE_DECLARATION:
				sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
				return; 
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				if (rule == grammarAccess.getArrayLiteralRule()) {
					sequence_ArrayLiteral(context, (XListLiteral) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXCollectionLiteralRule()
						|| rule == grammarAccess.getXListLiteralRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XListLiteral(context, (XListLiteral) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AlgorithmList returns AlgorithmList
	 *
	 * Constraint:
	 *     specifications+=AlgorithmSpecification+
	 */
	protected void sequence_AlgorithmList(ISerializationContext context, AlgorithmList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlgorithmReferences returns AlgorithmReferences
	 *
	 * Constraint:
	 *     (elements+=[AlgorithmSpecification|ID] elements+=[AlgorithmSpecification|ID]*)?
	 */
	protected void sequence_AlgorithmReferences(ISerializationContext context, AlgorithmReferences semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AlgorithmSpecification returns AlgorithmSpecification
	 *
	 * Constraint:
	 *     (name=ValidID call=XExpression)
	 */
	protected void sequence_AlgorithmSpecification(ISerializationContext context, AlgorithmSpecification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.ALGORITHM_SPECIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.ALGORITHM_SPECIFICATION__NAME));
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.ALGORITHM_SPECIFICATION__CALL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.ALGORITHM_SPECIFICATION__CALL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAlgorithmSpecificationAccess().getNameValidIDParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAlgorithmSpecificationAccess().getCallXExpressionParserRuleCall_2_0(), semanticObject.getCall());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AnalysisGroupList returns AnalysisGroupList
	 *
	 * Constraint:
	 *     group+=AnalysisGroupSpecification+
	 */
	protected void sequence_AnalysisGroupList(ISerializationContext context, AnalysisGroupList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnalysisGroupSpecification returns AnalysisGroupSpecification
	 *
	 * Constraint:
	 *     (name=ValidID algorithms=AlgorithmReferences)
	 */
	protected void sequence_AnalysisGroupSpecification(ISerializationContext context, AnalysisGroupSpecification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.ANALYSIS_GROUP_SPECIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.ANALYSIS_GROUP_SPECIFICATION__NAME));
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.ANALYSIS_GROUP_SPECIFICATION__ALGORITHMS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.ANALYSIS_GROUP_SPECIFICATION__ALGORITHMS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnalysisGroupSpecificationAccess().getNameValidIDParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAnalysisGroupSpecificationAccess().getAlgorithmsAlgorithmReferencesParserRuleCall_3_0(), semanticObject.getAlgorithms());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AnalysisOrchestration returns AnalysisOrchestration
	 *
	 * Constraint:
	 *     (
	 *         indicators=IndicatorArray | 
	 *         significance=XNumberLiteral | 
	 *         show=ShowArray | 
	 *         grouping=AnalysisGroupList | 
	 *         saveCommand=SaveAnalysisCommand | 
	 *         boxplotCommand=BoxplotCommand | 
	 *         printCommand=PrintAnalysisCommand
	 *     )*
	 */
	protected void sequence_AnalysisOrchestration(ISerializationContext context, AnalysisOrchestration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArrayLiteral returns XListLiteral
	 *
	 * Constraint:
	 *     (elements+=XExpression elements+=XExpression*)
	 */
	protected void sequence_ArrayLiteral(ISerializationContext context, XListLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnalysisCommand returns BoxplotCommand
	 *     BoxplotCommand returns BoxplotCommand
	 *
	 * Constraint:
	 *     directory=XStringLiteral
	 */
	protected void sequence_BoxplotCommand(ISerializationContext context, BoxplotCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.BOXPLOT_COMMAND__DIRECTORY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.BOXPLOT_COMMAND__DIRECTORY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBoxplotCommandAccess().getDirectoryXStringLiteralParserRuleCall_2_0(), semanticObject.getDirectory());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CollectorArray returns CollectorArray
	 *
	 * Constraint:
	 *     (
	 *         hypervolume?='hypervolume' | 
	 *         generationalDistance?='generationalDistance' | 
	 *         invertedGenerationalDistance?='invertedGenerationalDistance' | 
	 *         spacing?='spacing' | 
	 *         additiveEpsilonIndicator?='additiveEpsilonIndicator' | 
	 *         contribution?='contribution' | 
	 *         r1?='R1' | 
	 *         r2?='R2' | 
	 *         r3?='R3' | 
	 *         adaptiveMultimethodVariation?='adaptiveMultimethodVariation' | 
	 *         adaptiveTimeContinuation?='adaptiveTimeContinuation' | 
	 *         approximationSet?='approximationSet' | 
	 *         epsilonProgress?='epsilonProgress' | 
	 *         elapsedTime?='elapsedTime' | 
	 *         populationSize?='populationSize'
	 *     )*
	 */
	protected void sequence_CollectorArray(ISerializationContext context, CollectorArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefExpression returns DefExpression
	 *
	 * Constraint:
	 *     expression=STRING
	 */
	protected void sequence_DefExpression(ISerializationContext context, DefExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.DEF_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.DEF_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefExpressionAccess().getExpressionSTRINGTerminalRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EqualityHelper returns EqualityHelper
	 *
	 * Constraint:
	 *     (call=XConstructorCall | method=XBlockExpression)
	 */
	protected void sequence_EqualityHelper(ISerializationContext context, EqualityHelper semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExperimentOrchestration returns ExperimentOrchestration
	 *
	 * Constraint:
	 *     (
	 *         populationSize=XExpression 
	 *         maxEvaluations=XExpression 
	 *         maxSeconds=XExpression? 
	 *         nrRuns=XNumberLiteral 
	 *         referenceSet=XExpression? 
	 *         (progressListeners+=XConstructorCall progressListeners+=XConstructorCall*)? 
	 *         (collectors=CollectorArray customCollectors+=XConstructorCall customCollectors+=XConstructorCall*)?
	 *     )
	 */
	protected void sequence_ExperimentOrchestration(ISerializationContext context, ExperimentOrchestration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FitnessDimensionSpecification returns FitnessDimensionConstructor
	 *     FitnessDimensionConstructor returns FitnessDimensionConstructor
	 *
	 * Constraint:
	 *     (name=ValidID type=FitnessDimensionType call=XConstructorCall)
	 */
	protected void sequence_FitnessDimensionConstructor(ISerializationContext context, FitnessDimensionConstructor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.FITNESS_DIMENSION_SPECIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.FITNESS_DIMENSION_SPECIFICATION__NAME));
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.FITNESS_DIMENSION_SPECIFICATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.FITNESS_DIMENSION_SPECIFICATION__TYPE));
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.FITNESS_DIMENSION_CONSTRUCTOR__CALL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.FITNESS_DIMENSION_CONSTRUCTOR__CALL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFitnessDimensionConstructorAccess().getNameValidIDParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFitnessDimensionConstructorAccess().getTypeFitnessDimensionTypeEnumRuleCall_2_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getFitnessDimensionConstructorAccess().getCallXConstructorCallParserRuleCall_3_0(), semanticObject.getCall());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FitnessDimensionSpecification returns FitnessDimensionOCL
	 *     FitnessDimensionOCL returns FitnessDimensionOCL
	 *
	 * Constraint:
	 *     (name=ValidID type=FitnessDimensionType query=XStringLiteral defExpressions+=DefExpression*)
	 */
	protected void sequence_FitnessDimensionOCL(ISerializationContext context, FitnessDimensionOCL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FitnessDimensionSpecification returns FitnessDimensionXBase
	 *     FitnessDimensionXBase returns FitnessDimensionXBase
	 *
	 * Constraint:
	 *     (name=ValidID type=FitnessDimensionType value=XBlockExpression)
	 */
	protected void sequence_FitnessDimensionXBase(ISerializationContext context, FitnessDimensionXBase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.FITNESS_DIMENSION_SPECIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.FITNESS_DIMENSION_SPECIFICATION__NAME));
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.FITNESS_DIMENSION_SPECIFICATION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.FITNESS_DIMENSION_SPECIFICATION__TYPE));
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.FITNESS_DIMENSION_XBASE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.FITNESS_DIMENSION_XBASE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFitnessDimensionXBaseAccess().getNameValidIDParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFitnessDimensionXBaseAccess().getTypeFitnessDimensionTypeEnumRuleCall_2_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getFitnessDimensionXBaseAccess().getValueXBlockExpressionParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FitnessFunctionSpecification returns FitnessFunctionSpecification
	 *
	 * Constraint:
	 *     (
	 *         constructor=XConstructorCall? 
	 *         preprocess=XBlockExpression? 
	 *         objectives+=FitnessDimensionSpecification+ 
	 *         constraints+=FitnessDimensionSpecification* 
	 *         postprocess=XBlockExpression? 
	 *         solutionRepairer=XConstructorCall?
	 *     )
	 */
	protected void sequence_FitnessFunctionSpecification(ISerializationContext context, FitnessFunctionSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IndicatorArray returns IndicatorArray
	 *
	 * Constraint:
	 *     (
	 *         hypervolume?='hypervolume' | 
	 *         generationalDistance?='generationalDistance' | 
	 *         invertedGenerationalDistance?='invertedGenerationalDistance' | 
	 *         spacing?='spacing' | 
	 *         additiveEpsilonIndicator?='additiveEpsilonIndicator' | 
	 *         contribution?='contribution' | 
	 *         r1?='R1' | 
	 *         r2?='R2' | 
	 *         r3?='R3' | 
	 *         maximumParetoFrontError?='maximumParetoFrontError'
	 *     )*
	 */
	protected void sequence_IndicatorArray(ISerializationContext context, IndicatorArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InputModel returns InputModel
	 *
	 * Constraint:
	 *     (path=XExpression adaptation=XBlockExpression?)
	 */
	protected void sequence_InputModel(ISerializationContext context, InputModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MOMoTSearch returns MOMoTSearch
	 *
	 * Constraint:
	 *     (
	 *         package=QualifiedName? 
	 *         importSection=XImportSection? 
	 *         variables+=VariableDeclaration* 
	 *         initialization=XBlockExpression? 
	 *         name=ValidID? 
	 *         searchOrchestration=SearchOrchestration 
	 *         experimentOrchestration=ExperimentOrchestration 
	 *         analysisOrchestration=AnalysisOrchestration? 
	 *         resultManagement=ResultManagement? 
	 *         finalization=XBlockExpression?
	 *     )
	 */
	protected void sequence_MOMoTSearch(ISerializationContext context, MOMoTSearch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResultManagementCommand returns ModelsCommand
	 *     ModelsCommand returns ModelsCommand
	 *
	 * Constraint:
	 *     (algorithms=AlgorithmReferences | neighborhoodSize=INT | maxNeighborhoodSize?='maxNeighborhoodSize' | directory=STRING | printOutput?='printOutput')*
	 */
	protected void sequence_ModelsCommand(ISerializationContext context, ModelsCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModuleOrchestration returns ModuleOrchestration
	 *
	 * Constraint:
	 *     (modules=ArrayLiteral unitsToRemove=ArrayLiteral? nonSolutionParameters=ArrayLiteral? parameterValues+=ParmeterValueSpecification*)
	 */
	protected void sequence_ModuleOrchestration(ISerializationContext context, ModuleOrchestration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResultManagementCommand returns ObjectivesCommand
	 *     ObjectivesCommand returns ObjectivesCommand
	 *
	 * Constraint:
	 *     (algorithms=AlgorithmReferences | neighborhoodSize=INT | maxNeighborhoodSize?='maxNeighborhoodSize' | file=STRING | printOutput?='printOutput')*
	 */
	protected void sequence_ObjectivesCommand(ISerializationContext context, ObjectivesCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParmeterValueSpecification returns ParmeterValueSpecification
	 *
	 * Constraint:
	 *     (name=XExpression call=XConstructorCall)
	 */
	protected void sequence_ParmeterValueSpecification(ISerializationContext context, ParmeterValueSpecification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.PARMETER_VALUE_SPECIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.PARMETER_VALUE_SPECIFICATION__NAME));
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.PARMETER_VALUE_SPECIFICATION__CALL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.PARMETER_VALUE_SPECIFICATION__CALL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParmeterValueSpecificationAccess().getNameXExpressionParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParmeterValueSpecificationAccess().getCallXConstructorCallParserRuleCall_3_0(), semanticObject.getCall());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AnalysisCommand returns PrintAnalysisCommand
	 *     PrintAnalysisCommand returns PrintAnalysisCommand
	 *
	 * Constraint:
	 *     {PrintAnalysisCommand}
	 */
	protected void sequence_PrintAnalysisCommand(ISerializationContext context, PrintAnalysisCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResultManagement returns ResultManagement
	 *
	 * Constraint:
	 *     (adaptModels=XBlockExpression? commands+=ResultManagementCommand+)
	 */
	protected void sequence_ResultManagement(ISerializationContext context, ResultManagement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnalysisCommand returns SaveAnalysisCommand
	 *     SaveAnalysisCommand returns SaveAnalysisCommand
	 *
	 * Constraint:
	 *     file=XStringLiteral
	 */
	protected void sequence_SaveAnalysisCommand(ISerializationContext context, SaveAnalysisCommand semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MomotPackage.Literals.SAVE_ANALYSIS_COMMAND__FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MomotPackage.Literals.SAVE_ANALYSIS_COMMAND__FILE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSaveAnalysisCommandAccess().getFileXStringLiteralParserRuleCall_2_0(), semanticObject.getFile());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SearchOrchestration returns SearchOrchestration
	 *
	 * Constraint:
	 *     (
	 *         model=InputModel 
	 *         solutionLength=XExpression 
	 *         emptyInitialization?='true'? 
	 *         moduleOrchestration=ModuleOrchestration 
	 *         fitnessFunction=FitnessFunctionSpecification 
	 *         algorithms=AlgorithmList 
	 *         equalityHelper=EqualityHelper?
	 *     )
	 */
	protected void sequence_SearchOrchestration(ISerializationContext context, SearchOrchestration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShowArray returns ShowArray
	 *
	 * Constraint:
	 *     (individual?='individualValues' | aggregate?='aggregateValues' | statisticalSignificance?='statisticalSignificance')*
	 */
	protected void sequence_ShowArray(ISerializationContext context, ShowArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ResultManagementCommand returns SolutionsCommand
	 *     SolutionsCommand returns SolutionsCommand
	 *
	 * Constraint:
	 *     (
	 *         algorithms=AlgorithmReferences | 
	 *         neighborhoodSize=INT | 
	 *         maxNeighborhoodSize?='maxNeighborhoodSize' | 
	 *         file=STRING | 
	 *         directory=STRING | 
	 *         printOutput?='printOutput'
	 *     )*
	 */
	protected void sequence_SolutionsCommand(ISerializationContext context, SolutionsCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDeclaration returns VariableDeclaration
	 *
	 * Constraint:
	 *     (type=JvmTypeReference? name=ValidID init=XExpression?)
	 */
	protected void sequence_VariableDeclaration(ISerializationContext context, VariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
