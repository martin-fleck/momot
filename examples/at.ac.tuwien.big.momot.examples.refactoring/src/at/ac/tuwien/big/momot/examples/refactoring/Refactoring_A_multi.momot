package at.ac.tuwien.big.momot.examples.refactoring.momot

import at.ac.tuwien.big.momot.^search.^fitness.dimension.TransformationLengthDimension
import at.ac.tuwien.big.momot.^search.solution.repair.TransformationPlaceholderRepairer
import at.ac.tuwien.big.moea.^experiment.executor.listener.SeedRuntimePrintListener
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.TransformationPlaceholderMutation
import org.moeaframework.core.operator.OnePointCrossover
import org.moeaframework.core.operator.TournamentSelection
import at.ac.tuwien.big.momot.examples.refactoring.refactoring.RefactoringPackage
import at.ac.tuwien.big.momot.examples.refactoring.RefractoringCostDimension
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.TransformationParameterMutation
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.TransformationVariableMutation
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.EqualChangeMutation

initialization = {
	RefactoringPackage::eINSTANCE.eClass
}
 
search = { 
	model = {
		file = "model/SeveralRefactorings.xmi"
	} 
	solutionLength = 10
	emptyInitialization = true
	
	transformations = {
		modules = [ "model/Refactoring.henshin" ]
	}
	
	fitness = {
		objectives = {
			SolutionLength : minimize new TransformationLengthDimension
			//SolutionCost : minimize new RefractoringCostDimension
			ContentSize : minimize "properties->size() * 1.1 + entities->size()"
		}
		solutionRepairer = new TransformationPlaceholderRepairer
	}
	
	
	
	algorithms = {
		//NSGAII_ORI : moea.createNSGAII()
      	NSGAII : moea.createNSGAII(
				new TournamentSelection(2),
				new OnePointCrossover(1.0),  
				new EqualChangeMutation(1.0,orchestration.searchHelper, orchestration.moduleManager))
				
  		NSGAII_OM : moea.createNSGAII(
				new TournamentSelection(2),
				new EqualChangeMutation(1.0,orchestration.searchHelper, orchestration.moduleManager))
				
		/*NSGAIII_ORI : moea.createNSGAIII()
		NSGAIII : moea.createNSGAIII(
				new TournamentSelection(2),
				new OnePointCrossover(1.0), new TransformationPlaceholderMutation(0.05),
				new TransformationParameterMutation(0.05,orchestration.moduleManager
					
				),
				new TransformationVariableMutation(orchestration.searchHelper,0.05))
		NSGAIII_OM : moea.createNSGAIII(
				new TournamentSelection(2),
				new TransformationPlaceholderMutation(0.4),
				new TransformationParameterMutation(0.4,orchestration.moduleManager
					
				),
				new TransformationVariableMutation(orchestration.searchHelper,0.4))*/
				
	}
}
experiment = {
	populationSize = 100
	maxEvaluations = 9999999
	maxSeconds = 300  
   nrRuns            = 1
	progressListeners = [ new SeedRuntimePrintListener ]
}

results = {
   
   // save objectives
   objectives = {
      outputFile      = "output/objectives/objective_values.txt"
      printOutput
   }
   
   objectives = {
      outputFile      = "output/objectives/random_objective_values.txt"
      algorithms      = [ NSGAII, NSGAII_OM]
   }

   // save solutions, i.e., transformation orchestrations
   solutions  = {
      outputFile      = "output/solutions/all_solutions.txt"
      outputDirectory = "output/solutions/"
   }

   // save models resulting from the orchestrated transformations
   models     = {
      outputDirectory = "output/models/"
   }
   
   // select kneepoint models for further inspection
   models     = {
      neighborhoodSize = maxNeighborhoodSize
      outputDirectory  = "output/models/kneepoints/"
   }
}